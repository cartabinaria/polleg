basePath: /
definitions:
  api.Answer:
    properties:
      can_i_delete:
        type: boolean
      content:
        type: string
      created_at:
        type: string
      downvotes:
        type: integer
      i_voted:
        $ref: '#/definitions/api.VoteValue'
      id:
        type: integer
      parent:
        type: integer
      question:
        type: integer
      replies:
        items:
          $ref: '#/definitions/api.Answer'
        type: array
      updated_at:
        type: string
      upvotes:
        type: integer
      user:
        type: string
      user_avatar_url:
        type: string
    type: object
  api.BannedUser:
    properties:
      avatar_url:
        type: string
      banned_at:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  api.Coord:
    properties:
      end:
        type: integer
      start:
        type: integer
    type: object
  api.Document:
    properties:
      id:
        type: string
      questions:
        items:
          $ref: '#/definitions/api.Question'
        type: array
    type: object
  api.Image:
    properties:
      id:
        type: string
      url:
        type: string
    type: object
  api.PostDocumentRequest:
    properties:
      coords:
        items:
          $ref: '#/definitions/api.Coord'
        type: array
      id:
        type: string
    type: object
  api.Question:
    properties:
      answers:
        items:
          $ref: '#/definitions/api.Answer'
        type: array
      created_at:
        type: string
      document:
        type: string
      end:
        type: integer
      id:
        type: integer
      start:
        type: integer
      updated_at:
        type: string
    type: object
  api.Report:
    properties:
      answer_id:
        type: integer
      cause:
        type: string
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user_avatar_url:
        type: string
      user_id:
        type: string
    type: object
  api.ReportRequest:
    properties:
      cause:
        type: string
    type: object
  api.Vote:
    properties:
      answer:
        type: integer
      createdAt:
        type: string
      updatedAt:
        type: string
      user:
        type: string
      vote:
        type: integer
    type: object
  api.VoteValue:
    enum:
    - 1
    - 0
    - -1
    format: int32
    type: integer
    x-enum-varnames:
    - VoteUp
    - VoteNone
    - VoteDown
  api_proposal.DocumentProposal:
    properties:
      document_path:
        type: string
      id:
        type: string
      questions:
        items:
          $ref: '#/definitions/api_proposal.Proposal'
        type: array
    type: object
  api_proposal.Proposal:
    properties:
      created_at:
        type: string
      document:
        type: string
      document_path:
        type: string
      end:
        type: integer
      id:
        type: integer
      start:
        type: integer
      updated_at:
        type: string
      user_avatar_url:
        type: string
      username:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  httputil.ApiError:
    properties:
      error:
        type: string
    type: object
  models.Answer:
    properties:
      anonymous:
        type: boolean
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      downvotes:
        type: integer
      id:
        description: taken from from gorm.Model, so we can json strigify properly
        type: integer
      parent:
        type: integer
      question:
        type: integer
      replies:
        items:
          $ref: '#/definitions/models.Answer'
        type: array
      state:
        $ref: '#/definitions/models.AnswerState'
      updatedAt:
        type: string
      upvotes:
        type: integer
      userId:
        type: integer
      votes:
        items:
          $ref: '#/definitions/models.Vote'
        type: array
    type: object
  models.AnswerState:
    enum:
    - 0
    - 1
    - 2
    format: int32
    type: integer
    x-enum-varnames:
    - AnswerStateVisible
    - AnswerStateDeletedByUser
    - AnswerStateDeletedByAdmin
  models.PostAnswerRequest:
    properties:
      anonymous:
        type: boolean
      content:
        type: string
      parent:
        type: integer
      question:
        type: integer
    type: object
  models.Question:
    properties:
      answers:
        items:
          $ref: '#/definitions/models.Answer'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      document:
        type: string
      end:
        format: int32
        type: integer
      id:
        description: taken from from gorm.Model, so we can json strigify properly
        type: integer
      start:
        format: int32
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.Vote:
    properties:
      answerID:
        type: integer
      createdAt:
        description: taken from from gorm.Model
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
      vote:
        format: int32
        type: integer
    type: object
info:
  contact:
    email: gabriele.genovese2@studio.unibo.it
    name: Gabriele Genovese
  description: This is the backend API for Polleg that allows unibo students to answer
    exam exercises directly on the cartabinaria website
  license:
    name: AGPL-3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  title: Polleg API
  version: "1.0"
paths:
  /answer/{id}/vote:
    post:
      description: Insert a new vote on a answer
      parameters:
      - description: code query parameter
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Vote'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Insert a vote
      tags:
      - vote
  /answers:
    post:
      description: Insert a new answer under a question
      parameters:
      - description: Answer data to insert
        in: body
        name: answerReq
        required: true
        schema:
          $ref: '#/definitions/models.PostAnswerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Answer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Insert a new answer
      tags:
      - answer
  /answers/{id}:
    delete:
      description: Given an andwer ID, delete the answer
      parameters:
      - description: Answer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Delete an answer
      tags:
      - answer
    patch:
      description: Given an andwer ID, update the answer
      parameters:
      - description: Answer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Update an answer
      tags:
      - answer
  /answers/{id}/replies:
    get:
      description: Given an answer ID, return its replies
      parameters:
      - description: Answer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Answer'
      summary: Get answer replies
      tags:
      - answer
  /documents:
    post:
      description: Insert a new document with all the questions initialised
      parameters:
      - description: Doc request body
        in: body
        name: docRequest
        required: true
        schema:
          $ref: '#/definitions/api.PostDocumentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Document'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Insert a new document
      tags:
      - document
  /documents/{id}:
    get:
      description: Given a document's ID, return all the questions
      parameters:
      - description: document id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Document'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Get a document's divisions
      tags:
      - document
  /images:
    post:
      consumes:
      - multipart/form-data
      description: Insert a new image
      parameters:
      - description: Image to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Image'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Insert a new image
      tags:
      - image
  /images/{id}:
    get:
      description: Given an image ID, return the image
      parameters:
      - description: Image id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Get an image
      tags:
      - image
  /moderation/ban:
    get:
      description: Get all banned users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.BannedUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Get all banned users
      tags:
      - moderation
  /moderation/report/{id}:
    post:
      description: Report an answer given its ID
      parameters:
      - description: Answer id
        in: path
        name: id
        required: true
        type: string
      - description: Report cause
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/api.ReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Report an answer
      tags:
      - moderation
  /moderation/reports:
    get:
      description: Get all reports
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Report'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Get all reports
      tags:
      - moderation
  /proposals:
    get:
      description: Get all proposals
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api_proposal.DocumentProposal'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Get all proposals
      tags:
      - proposal
    post:
      description: Insert a new proposal for a document
      parameters:
      - description: Proposal data to insert
        in: body
        name: proposalReq
        required: true
        schema:
          $ref: '#/definitions/api_proposal.DocumentProposal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_proposal.DocumentProposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Insert a new proposal
      tags:
      - proposal
  /proposals/{id}:
    delete:
      description: Given a proposal ID, delete the proposal
      parameters:
      - description: Proposal id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Delete a proposal
      tags:
      - proposal
    get:
      description: Get a proposal given its ID
      parameters:
      - description: Proposal id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_proposal.Proposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Get proposal by id
      tags:
      - proposal
  /proposals/{id}/approve:
    post:
      description: Approve a proposal given its id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Question'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Approve a proposal
      tags:
      - answer
  /proposals/document/{id}:
    delete:
      description: Given a document ID, delete all its proposals
      parameters:
      - description: Document id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Delete all proposals for a document
      tags:
      - proposal
    get:
      description: Get all proposals for a document, given its ID
      parameters:
      - description: Document id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_proposal.Proposal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Get proposals by document id
      tags:
      - proposal
  /questions/{id}:
    delete:
      description: Given a question ID, delete the question
      parameters:
      - description: Question id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Delete a question
      tags:
      - question
    get:
      description: Given a question ID, return the question and all its answers
      parameters:
      - description: Answer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Question'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.ApiError'
      summary: Get all answers given a question
      tags:
      - question
swagger: "2.0"
