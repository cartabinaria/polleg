// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Gabriele Genovese",
            "email": "gabriele.genovese2@studio.unibo.it"
        },
        "license": {
            "name": "AGPL-3.0",
            "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/answer/{id}/vote": {
            "post": {
                "description": "Insert a new vote on a answer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "vote"
                ],
                "summary": "Insert a vote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "code query parameter",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Vote"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/answers": {
            "post": {
                "description": "Insert a new answer under a question",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "answer"
                ],
                "summary": "Insert a new answer",
                "parameters": [
                    {
                        "description": "Answer data to insert",
                        "name": "answerReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PostAnswerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Answer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/answers/{id}": {
            "delete": {
                "description": "Given an andwer ID, delete the answer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "answer"
                ],
                "summary": "Delete an answer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Answer id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            },
            "patch": {
                "description": "Given an andwer ID, update the answer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "answer"
                ],
                "summary": "Update an answer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Answer id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/answers/{id}/replies": {
            "get": {
                "description": "Given an answer ID, return its replies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "answer"
                ],
                "summary": "Get answer replies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Answer id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Answer"
                        }
                    }
                }
            }
        },
        "/documents": {
            "post": {
                "description": "Insert a new document with all the questions initialised",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "document"
                ],
                "summary": "Insert a new document",
                "parameters": [
                    {
                        "description": "Doc request body",
                        "name": "docRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.PostDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Document"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/documents/{id}": {
            "get": {
                "description": "Given a document's ID, return all the questions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "document"
                ],
                "summary": "Get a document's divisions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "document id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Document"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/images": {
            "post": {
                "description": "Insert a new image",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Insert a new image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.Image"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/images/{id}": {
            "get": {
                "description": "Given an image ID, return the image",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image"
                ],
                "summary": "Get an image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/moderation/ban": {
            "get": {
                "description": "Get all banned users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "moderation"
                ],
                "summary": "Get all banned users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.BannedUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            },
            "post": {
                "description": "Ban or unban a user given its username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "moderation"
                ],
                "summary": "Ban or unban a user",
                "parameters": [
                    {
                        "description": "Ban or unban a user",
                        "name": "banUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.BanUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/moderation/report/{id}": {
            "post": {
                "description": "Report an answer given its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "moderation"
                ],
                "summary": "Report an answer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Answer id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Report cause",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/moderation/reports": {
            "get": {
                "description": "Get all reports",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "moderation"
                ],
                "summary": "Get all reports",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Report"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/proposals": {
            "get": {
                "description": "Get all proposals",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposal"
                ],
                "summary": "Get all proposals",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api_proposal.DocumentProposal"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            },
            "post": {
                "description": "Insert a new proposal for a document",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposal"
                ],
                "summary": "Insert a new proposal",
                "parameters": [
                    {
                        "description": "Proposal data to insert",
                        "name": "proposalReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api_proposal.DocumentProposal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api_proposal.DocumentProposal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/proposals/document/{id}": {
            "get": {
                "description": "Get all proposals for a document, given its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposal"
                ],
                "summary": "Get proposals by document id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api_proposal.Proposal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Given a document ID, delete all its proposals",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposal"
                ],
                "summary": "Delete all proposals for a document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/proposals/{id}": {
            "get": {
                "description": "Get a proposal given its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposal"
                ],
                "summary": "Get proposal by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Proposal id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api_proposal.Proposal"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Given a proposal ID, delete the proposal",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proposal"
                ],
                "summary": "Delete a proposal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Proposal id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/proposals/{id}/approve": {
            "post": {
                "description": "Approve a proposal given its id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "answer"
                ],
                "summary": "Approve a proposal",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Question"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        },
        "/questions/{id}": {
            "get": {
                "description": "Given a question ID, return the question and all its answers",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question"
                ],
                "summary": "Get all answers given a question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Answer id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Question"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Given a question ID, delete the question",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "question"
                ],
                "summary": "Delete a question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Answer": {
            "type": "object",
            "properties": {
                "can_i_delete": {
                    "type": "boolean"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "downvotes": {
                    "type": "integer"
                },
                "i_voted": {
                    "$ref": "#/definitions/api.VoteValue"
                },
                "id": {
                    "type": "integer"
                },
                "parent": {
                    "type": "integer"
                },
                "question": {
                    "type": "integer"
                },
                "replies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Answer"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "upvotes": {
                    "type": "integer"
                },
                "user": {
                    "type": "string"
                },
                "user_avatar_url": {
                    "type": "string"
                }
            }
        },
        "api.BanUserRequest": {
            "type": "object",
            "properties": {
                "ban": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.BannedUser": {
            "type": "object",
            "properties": {
                "banned_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "user_avatar_url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.Coord": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer"
                },
                "start": {
                    "type": "integer"
                }
            }
        },
        "api.Document": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Question"
                    }
                }
            }
        },
        "api.Image": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "api.PostDocumentRequest": {
            "type": "object",
            "properties": {
                "coords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Coord"
                    }
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "api.Question": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.Answer"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "document": {
                    "type": "string"
                },
                "end": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "start": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "api.Report": {
            "type": "object",
            "properties": {
                "answer_id": {
                    "type": "integer"
                },
                "cause": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_avatar_url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "api.ReportRequest": {
            "type": "object",
            "properties": {
                "cause": {
                    "type": "string"
                }
            }
        },
        "api.Vote": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                },
                "vote": {
                    "type": "integer"
                }
            }
        },
        "api.VoteValue": {
            "type": "integer",
            "format": "int32",
            "enum": [
                1,
                0,
                -1
            ],
            "x-enum-varnames": [
                "VoteUp",
                "VoteNone",
                "VoteDown"
            ]
        },
        "api_proposal.DocumentProposal": {
            "type": "object",
            "properties": {
                "document_path": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api_proposal.Proposal"
                    }
                }
            }
        },
        "api_proposal.Proposal": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "document": {
                    "type": "string"
                },
                "document_path": {
                    "type": "string"
                },
                "end": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "start": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_avatar_url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "httputil.ApiError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Answer": {
            "type": "object",
            "properties": {
                "anonymous": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "downvotes": {
                    "type": "integer"
                },
                "id": {
                    "description": "taken from from gorm.Model, so we can json strigify properly",
                    "type": "integer"
                },
                "parent": {
                    "type": "integer"
                },
                "question": {
                    "type": "integer"
                },
                "replies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Answer"
                    }
                },
                "state": {
                    "$ref": "#/definitions/models.AnswerState"
                },
                "updatedAt": {
                    "type": "string"
                },
                "upvotes": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                },
                "votes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Vote"
                    }
                }
            }
        },
        "models.AnswerState": {
            "type": "integer",
            "format": "int32",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "AnswerStateVisible",
                "AnswerStateDeletedByUser",
                "AnswerStateDeletedByAdmin"
            ]
        },
        "models.PostAnswerRequest": {
            "type": "object",
            "properties": {
                "anonymous": {
                    "type": "boolean"
                },
                "content": {
                    "type": "string"
                },
                "parent": {
                    "type": "integer"
                },
                "question": {
                    "type": "integer"
                }
            }
        },
        "models.Question": {
            "type": "object",
            "properties": {
                "answers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Answer"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "document": {
                    "type": "string"
                },
                "end": {
                    "type": "integer",
                    "format": "int32"
                },
                "id": {
                    "description": "taken from from gorm.Model, so we can json strigify properly",
                    "type": "integer"
                },
                "start": {
                    "type": "integer",
                    "format": "int32"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.Vote": {
            "type": "object",
            "properties": {
                "answerID": {
                    "type": "integer"
                },
                "createdAt": {
                    "description": "taken from from gorm.Model",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                },
                "vote": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Polleg API",
	Description:      "This is the backend API for Polleg that allows unibo students to answer exam exercises directly on the cartabinaria website",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
