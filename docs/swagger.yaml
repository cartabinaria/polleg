basePath: /
definitions:
  api.Answer:
    properties:
      content:
        type: string
      created_at:
        type: string
      downvotes:
        type: integer
      id:
        description: taken from from gorm.Model, so we can json strigify properly
        type: integer
      parent:
        type: integer
      question:
        type: integer
      replies:
        items:
          $ref: '#/definitions/api.Answer'
        type: array
      updated_at:
        type: string
      upvotes:
        type: integer
      user:
        type: string
    type: object
  api.Coord:
    properties:
      end:
        type: integer
      start:
        type: integer
    type: object
  api.Document:
    properties:
      id:
        type: string
      questions:
        items:
          $ref: '#/definitions/api.Question'
        type: array
    type: object
  api.PutAnswerRequest:
    properties:
      content:
        type: string
      parent:
        type: integer
      question:
        type: integer
    type: object
  api.PutDocumentRequest:
    properties:
      coords:
        items:
          $ref: '#/definitions/api.Coord'
        type: array
      id:
        type: string
    type: object
  api.Question:
    properties:
      answers:
        items:
          $ref: '#/definitions/api.Answer'
        type: array
      created_at:
        type: string
      document:
        type: string
      end:
        type: integer
      id:
        description: taken from from gorm.Model, so we can json strigify properly
        type: integer
      start:
        type: integer
      updated_at:
        type: string
    type: object
  api.Vote:
    properties:
      answer:
        type: integer
      createdAt:
        description: taken from from gorm.Model
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      updatedAt:
        type: string
      user:
        type: string
      vote:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  util.ApiError:
    properties:
      error:
        type: string
    type: object
info:
  contact:
    email: gabriele.genovese2@studio.unibo.it
    name: Gabriele Genovese
  description: This is the backend API for Polleg that allows unibo students to answer
    exam exercises directly on the csunibo website
  license:
    name: AGPL-3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  title: Polleg API
  version: "1.0"
paths:
  /answer/{id}/vote:
    post:
      description: Insert a new vote on a answer
      parameters:
      - description: code query parameter
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Vote'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ApiError'
      summary: Insert a vote
      tags:
      - vote
  /answers:
    put:
      description: Insert a new answer under a question
      parameters:
      - description: Answer data to insert
        in: body
        name: answerReq
        required: true
        schema:
          $ref: '#/definitions/api.PutAnswerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Answer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ApiError'
      summary: Insert a new answer
      tags:
      - answer
  /answers/{id}:
    delete:
      description: Given an andwer ID, delete the answer
      parameters:
      - description: Answer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Answer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ApiError'
      summary: Delete an answer
      tags:
      - answer
  /documents:
    put:
      description: Insert a new document with all the questions initialised
      parameters:
      - description: Doc request body
        in: body
        name: docRequest
        required: true
        schema:
          $ref: '#/definitions/api.PutDocumentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Document'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ApiError'
      summary: Insert a new document
      tags:
      - document
  /documents/{id}:
    get:
      description: Given a document's ID, return all the questions
      parameters:
      - description: document id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Document'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ApiError'
      summary: Get a document's divisions
      tags:
      - document
  /questions/{id}:
    get:
      description: Given a question ID, return the question and all its answers
      parameters:
      - description: Answer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/api.Answer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ApiError'
      summary: Get all answers given a question
      tags:
      - question
swagger: "2.0"
